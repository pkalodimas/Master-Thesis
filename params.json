{
  "name": "Low Resources TSM Face Detection System",
  "tagline": "",
  "body": "###Abstract\r\n\r\nThis is the web page of [Panos Kalodimas](https://gr.linkedin.com/in/pkalodimas) master thesis at the [Technical University of Crete](http://www.tuc.gr), [Department of Electronics and Computer Engineering](http://www.ece.tuc.gr), Chania, Greece.\r\n\r\nIn this thesis a custom implementation of the [“Face Detection, Pose Estimation, and Landmark Localization in the Wild”](http://www.ics.uci.edu/~xzhu/face/) system by [Xiangxin Zhu](http://www.ics.uci.edu/~xzhu/) and [Deva Ramanan](http://www.cs.cmu.edu/~deva/) is represented. This implementation was firstly designed for being used by embedded systems but finally it can also be used by large multiprocessors systems. This is because the modern embedded systems tend to be similar to what we used to call multiprocessor systems years ago. The latest embedded system are in the category of small multiprocessor systems using from 2 to 4 and even more cores in their central processing unit.\r\n\r\nOur Tree Structural Model (TSM) Face Detection system was implemented both in C (Basic) and C++ (Object Oriented) and there is no usage of any external C++ library in the core of the algorithm. This gives the algorithm the ability to be used in both Windows and UNIX systems with no further changes. It also allows further improvements and alteration as it is easily readable for those who would like to use it for custom application. Our implementation gives the ability of customizing the functionality of the algorithm through a set of settings and parameters that can easily be modified.\r\n\r\nAs this implementation is designed for usage in embedded systems the need of reducing memory consumption and processing speedup was encounter. For that reason a number of customizations were made in contrast to the original implementation of its creators. Compared to the implementation of [Hang Su](https://people.cs.umass.edu/~hsu/), this implementation is two times faster and consumes about ten times less memory as described in the documentation. There were also presented a set of techniques that some may pull down the algorithm’s performance but in contrast they offer extra speedup and memory saving. These techniques may be very useful for custom application.\r\n\r\nDespite any further speedup the main problem of making the face detection task a great time consumer is the fact that the image size in the one that makes it a long time processing. Large images compel the system to create large image pyramids in order to search them for face detection. In addition the larger the top image is the more time is needed to be processed. The main solution on this problem is proposed is the scaling of the original image to a smaller size in order to reduce the number of data needed to be processed. This solution makes the systems faster but they lose part of their performance as scaling an image to a smaller size makes small size faces to be unable for detection. Our implementation presents a method that scans the image pyramid faster for face detections in order to avoid detection processing in pyramid levels that seems to be empty of faces. This can be a very effective method for video application where empty faces frames can be faster processed and rejected.\r\n\r\n###Documentation\r\nThe available documentation is the [master thesis](https://github.com/pkalodimas/Master-Thesis/raw/master/Master%20Thesis%20-%20TSM%20Face%20Detection.pdf) documentation, a [short presentation](https://github.com/pkalodimas/Master-Thesis/raw/master/Master%20Thesis%20-%20TSM%20Face%20Detection%20Presentation.pdf) and the [TSM system user  manual](https://github.com/pkalodimas/Master-Thesis/raw/master/TSM%20Face%20Detection%20System%20Manual.pdf).\r\nThe master thesis documentation contains the following chapters,\r\n* **Chapters 4 and 5** contain the TSM Algorithm short and detailed description.\r\n* **Chapter 6** describes code optimization steps. The results are presented summarily in the subchapter 6.21.\r\n* **Chapter 7** describes two algorithm optimization patches that are included in the implementation.\r\n* **Chapter 8** describes the TSM system speedup using multi-threading technology. The summarized results are presented in subchapter 8.9.4.\r\n* **Chapter 9** describes methods that can be applied in the TSM system in order in some cases speed it up.\r\n* **Chapter 10** presents the comparison between this implementation and the one the creators presented.\r\n\r\n###Implementation\r\nThe Implementation of the TSM Face Detection system is implemented in both basic C and Object Oriented C++. \r\n* The **Basic C** implementation (All versions) can be found here.\r\n* The **Object Oriented C++** implementation (Versions 3.2.2 and 2.2.2) can be found here.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}